% Параметры нейросети
inputSize = 4;     % Количество входных нейронов
hiddenSize = 10;   % Количество нейронов в скрытом слое
outputSize = 1;    % Количество выходных нейронов
learningRate = 0.2; % Скорость обучения
epochs = 500000;     % Количество эпох обучения

% Инициализация весов и порогов
W1 = rand(hiddenSize, inputSize) ;  % Веса между входным и скрытым слоями
W2 = rand(outputSize, hiddenSize) ; % Веса между скрытым и выходным слоями


% Функция активации (сигмоид)
sigmoid = @(x) 1 ./ (1 + exp(-x));

% Функция производной сигмоида
sigmoid_derivative = @(x) x .* (1 - x);

% Генерация случайных входных данных в пределах заданных интервалов

% Обучение нейросети
for epoch = 1:epochs

    
    x1 = 2 + 2 * rand();
    x2 = 4 + 2 * rand();
    x3 = 6 + 2 * rand();
    x4 = 8 + 2 * rand();

    Y = (x1 + x2) * (x3 + x4); % Целевое значение
    Y = (Y - 84) / 96;

    xo1 = (x1 - 2) / 2;
    xo2 = (x2 - 4) / 2;
    xo3 = (x3 - 6) / 2;
    xo4 = (x4 - 8) / 2;
    X = [xo1 ; xo2; xo3; xo4];

    % Прямое распространение
    Z1 = W1 * X ;
    A1 = sigmoid(Z1);
    Z2 = W2 * A1;
    A2 = sigmoid(Z2);

    % Обратное распространение
    error = Y - A2;
    dZ2 = error .* sigmoid_derivative(A2);
 

    dA1 = W2' * dZ2;
    dZ1 = dA1 .* sigmoid_derivative(A1);
    
    dW1 = dZ1 * X';
    dW2 = dZ2 * A1';
   

    % Обновление весов и порогов
    W1 = W1 + learningRate * dW1;
    W2 = W2 + learningRate * dW2;
 
end



% Проверка обученной сети
test_cases = [
3, 5, 7, 9
2.5, 5.5, 6.5, 9.5
3.5, 4.5, 7.5, 8.5
2, 4, 6, 8
2, 8, 6, 10
3.5, 6.5, 7.5, 9.5,
4, 6, 8, 10
]; % Примеры тестовых данных
num_tests = size(test_cases, 1);


e = 0;

for j = 1:num_tests
    X = test_cases(j, :);
    x1 = (X(1) - 2) / 2;
    x2 = (X(2) - 4) / 2;
    x3 = (X(3) - 6) / 2;
    x4 = (X(4) - 8) / 2;
    X2 = [x1 ; x2; x3; x4];

    % Прямое распространение
    Z1 = W1 * X2 ;
    A1 = sigmoid(Z1);
    Z2 = W2 * A1;
    A2 = sigmoid(Z2);
    answer = A2 * 96 + 84;
    target = (X(1) + X(2)) * (X(3) + X(4));
    e = (answer - target)

    disp(['Тестовые входные данные: ', mat2str(X)]);
    disp(['Предсказание сети: ', num2str(answer)]);
    disp(['Ожидаемое значение: ', num2str(target)]);
    disp('---');
end


