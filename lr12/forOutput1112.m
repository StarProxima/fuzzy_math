% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 22-Nov-2023 23:04:31
%
% This script assumes these variables are defined:
%
%   Input - input data.
%   Target - target data.

x = Input;
t = Target;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 5;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.trainParam.epochs = 100;
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);

output = y;

s1=0;
s2=0;
  for(i=1:25)
      s1=s1+((Target(i)-output(i))^2);
      s2=s2+(Target(i)^2);
  end
s1=s1^(1/2);
d=s1/(s2^(1/2));

ans=d;


